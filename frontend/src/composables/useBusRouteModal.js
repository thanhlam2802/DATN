import { ref, reactive, computed } from 'vue'
import { createBus } from '@/api/busApi'
import { createRoute, findRouteByOriginDestination } from '@/api/routeApi'  
import { createBusRoute } from '@/api/busRouteApi'
import { 
  parseTimeToMinutes, 
  getBusCategoryId,
  generateBusName,
  combineDateTime,
  calculateDistance,
  validateTimeOrder,
  getCityFullName
} from '@/utils/busHelper'

export function useBusRouteModal() {
  // State
  const isVisible = ref(false)
  const currentStep = ref(1)
  const isEditing = ref(false)
  const editingRouteId = ref(null)
  const isLoading = ref(false)
  
  // Steps Configuration - Gi·∫£m xu·ªëng 2 b∆∞·ªõc
  const steps = ref([
    { id: 1, title: 'Th√¥ng tin xe & tuy·∫øn', key: 'basic' },
    { id: 2, title: 'Th·ªùi gian & gi√° v√©', key: 'schedule' }
  ])

  // Form Data - CH·ªà GI·ªÆ 7 TR∆Ø·ªúNG C·∫¶N THI·∫æT
  const formData = reactive({
    // Bus entity fields
    busType: '',              // ‚Üí BusCategory.id
    licensePlate: '',         // ‚Üí Bus.name (k·∫øt h·ª£p)
    
    // Route + Bus entity fields
    departure: {
      city: '',               // ‚Üí Route.origin + Bus.origin
      time: ''               // ‚Üí Bus.departureTime
    },
    arrival: {
      city: '',               // ‚Üí Route.destination + Bus.destination
      time: ''               // ‚Üí Bus.arrivalTime
    },
    
    // Route entity fields
    travelTime: '',           // ‚Üí Route.estimatedDurationMinutes
    
    // BusRoute entity fields
    ticketPrice: ''           // ‚Üí BusRoute.price
  })

  // Validation Errors
  const validationErrors = ref({})

  // Computed
  const totalSteps = computed(() => steps.value.length)
  
  const currentStepData = computed(() => {
    return steps.value.find(step => step.id === currentStep.value)
  })

  const canGoNext = computed(() => {
    return currentStep.value < totalSteps.value && validateCurrentStep()
  })

  const canGoPrevious = computed(() => {
    return currentStep.value > 1
  })

  // Methods
  const openModal = (routeData = null) => {
    if (routeData) {
      isEditing.value = true
      editingRouteId.value = routeData.id
      populateFormData(routeData)
    } else {
      isEditing.value = false
      editingRouteId.value = null
      resetFormData()
    }
    
    isVisible.value = true
    currentStep.value = 1
    clearValidationErrors()
  }

  const closeModal = () => {
    isVisible.value = false
    setTimeout(() => {
      resetFormData()
      currentStep.value = 1
      isEditing.value = false
      editingRouteId.value = null
      clearValidationErrors()
      isLoading.value = false
    }, 300)
  }

  const nextStep = () => {
    if (validateCurrentStep()) {
      if (currentStep.value < totalSteps.value) {
        currentStep.value++
        clearValidationErrors()
      }
    }
  }

  const previousStep = () => {
    if (currentStep.value > 1) {
      currentStep.value--
      clearValidationErrors()
    }
  }

  const updateFormData = (data) => {
    Object.assign(formData, data)
  }

  const populateFormData = (routeData) => {
    // Populate form v·ªõi data t·ª´ BusRoute k·∫øt h·ª£p
    Object.assign(formData, {
      busType: routeData.busType || '',
      licensePlate: routeData.licensePlate || '',
      departure: {
        city: routeData.startLocation || '',
        time: routeData.departureTime || ''
      },
      arrival: {
        city: routeData.endLocation || '',
        time: routeData.arrivalTime || ''
      },
      travelTime: routeData.duration ? `${routeData.duration} gi·ªù` : '',
      ticketPrice: routeData.basePrice || ''
    })
  }

  const resetFormData = () => {
    Object.assign(formData, {
      busType: '',
      licensePlate: '',
      departure: { city: '', time: '' },
      arrival: { city: '', time: '' },
      travelTime: '',
      ticketPrice: ''
    })
  }

  const validateCurrentStep = () => {
    clearValidationErrors()
    
    switch (currentStep.value) {
      case 1:
        return validateBasicInfo()
      case 2:
        return validateScheduleAndPricing()
      default:
        return true
    }
  }

  const validateBasicInfo = () => {
    const errors = {}
    
    if (!formData.busType.trim()) {
      errors.busType = 'Lo·∫°i xe l√† b·∫Øt bu·ªôc'
    }
    
    if (!formData.licensePlate.trim()) {
      errors.licensePlate = 'Bi·ªÉn s·ªë xe l√† b·∫Øt bu·ªôc'
    }
    
    if (!formData.departure.city.trim()) {
      errors.departureCity = 'ƒêi·ªÉm ƒëi l√† b·∫Øt bu·ªôc'
    }
    
    if (!formData.arrival.city.trim()) {
      errors.arrivalCity = 'ƒêi·ªÉm ƒë·∫øn l√† b·∫Øt bu·ªôc'
    }
    
    // Validate kh√¥ng ƒë∆∞·ª£c tr√πng ƒëi·ªÉm ƒëi v√† ƒë·∫øn
    if (formData.departure.city && formData.arrival.city && 
        formData.departure.city === formData.arrival.city) {
      errors.arrivalCity = 'ƒêi·ªÉm ƒë·∫øn ph·∫£i kh√°c ƒëi·ªÉm ƒëi'
    }
    
    validationErrors.value = errors
    return Object.keys(errors).length === 0
  }

  const validateScheduleAndPricing = () => {
    const errors = {}
    
    if (!formData.departure.time.trim()) {
      errors.departureTime = 'Gi·ªù kh·ªüi h√†nh l√† b·∫Øt bu·ªôc'
    }
    
    if (!formData.arrival.time.trim()) {
      errors.arrivalTime = 'Gi·ªù ƒë·∫øn l√† b·∫Øt bu·ªôc'
    }
    
    // Validate th·ª© t·ª± th·ªùi gian
    if (formData.departure.time && formData.arrival.time && 
        !validateTimeOrder(formData.departure.time, formData.arrival.time)) {
      errors.arrivalTime = 'Gi·ªù ƒë·∫øn ph·∫£i sau gi·ªù kh·ªüi h√†nh'
    }
    
    if (!formData.travelTime.trim()) {
      errors.travelTime = 'Th·ªùi gian di chuy·ªÉn l√† b·∫Øt bu·ªôc'
    }
    
    if (!formData.ticketPrice || formData.ticketPrice <= 0) {
      errors.ticketPrice = 'Gi√° v√© ph·∫£i l·ªõn h∆°n 0'
    }
    
    validationErrors.value = errors
    return Object.keys(errors).length === 0
  }

  const clearValidationErrors = () => {
    validationErrors.value = {}
  }

  const saveDraft = () => {
    // Implement save draft logic
    console.log('Saving draft:', formData)
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({ success: true, message: 'ƒê√£ l∆∞u nh√°p th√†nh c√¥ng' })
      }, 1000)
    })
  }

  const saveForm = async () => {
    if (!validateCurrentStep()) {
      return Promise.reject({ success: false, message: 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin' })
    }

    isLoading.value = true
    
    try {
      console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o Bus Route v·ªõi d·ªØ li·ªáu:', formData)
      
      // **B∆Ø·ªöC 1: T√åM HO·∫∂C T·∫†O ROUTE**
      let route = null
      
      try {
        // T√¨m route ƒë√£ t·ªìn t·∫°i
        const existingRouteResponse = await findRouteByOriginDestination(
          formData.departure.city, 
          formData.arrival.city
        )
        
        if (existingRouteResponse.data && existingRouteResponse.data.length > 0) {
          route = existingRouteResponse.data[0]
          console.log('‚úÖ S·ª≠ d·ª•ng Route ƒë√£ t·ªìn t·∫°i:', route)
        }
      } catch (error) {
        console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y Route ƒë√£ t·ªìn t·∫°i, s·∫Ω t·∫°o m·ªõi')
      }
      
      // T·∫°o Route m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
      if (!route) {
        const routeData = {
          origin: getCityFullName(formData.departure.city),
          destination: getCityFullName(formData.arrival.city),
          distanceKm: calculateDistance(formData.departure.city, formData.arrival.city),
          estimatedDurationMinutes: parseTimeToMinutes(formData.travelTime)
        }
        
        console.log('üõ£Ô∏è T·∫°o Route m·ªõi:', routeData)
        const routeResponse = await createRoute(routeData)
        route = routeResponse.data
        console.log('‚úÖ Route ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:', route)
      }

      // **B∆Ø·ªöC 2: T·∫†O BUS**
      const busData = {
        name: generateBusName(formData),
        categoryId: getBusCategoryId(formData.busType),
        origin: getCityFullName(formData.departure.city),
        destination: getCityFullName(formData.arrival.city),
        departureTime: combineDateTime(formData.departure.time),
        arrivalTime: combineDateTime(formData.arrival.time),
        ownerId: 1 // Mock current user ID - s·∫Ω l·∫•y t·ª´ auth context
      }
      
      console.log('üöå T·∫°o Bus:', busData)
      const busResponse = await createBus(busData)
      const bus = busResponse.data
      console.log('‚úÖ Bus ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:', bus)

      // **B∆Ø·ªöC 3: T·∫†O BUSROUTE**
      const busRouteData = {
        busId: bus.id,
        routeId: route.id,
        travelDate: new Date().toISOString(), // Ng√†y hi·ªán t·∫°i
        price: parseFloat(formData.ticketPrice),
        status: 'active'
      }
      
      console.log('üîó T·∫°o BusRoute:', busRouteData)
      const busRouteResponse = await createBusRoute(busRouteData)
      const busRoute = busRouteResponse.data
      console.log('‚úÖ BusRoute ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:', busRoute)

      // **TH√ÄNH C√îNG**
      isLoading.value = false
      
      const successMessage = isEditing.value 
        ? 'C·∫≠p nh·∫≠t tuy·∫øn xe th√†nh c√¥ng!' 
        : 'Th√™m tuy·∫øn xe m·ªõi th√†nh c√¥ng!'
      
      console.log('üéâ Ho√†n th√†nh t·∫°o Bus Route:', {
        bus,
        route,
        busRoute
      })
      
      return Promise.resolve({ 
        success: true, 
        message: successMessage,
        data: {
          bus,
          route,
          busRoute
        }
      })
      
    } catch (error) {
      isLoading.value = false
      console.error('‚ùå L·ªói khi t·∫°o Bus Route:', error)
      
      return Promise.reject({ 
        success: false, 
        message: 'C√≥ l·ªói x·∫£y ra khi t·∫°o tuy·∫øn xe. Vui l√≤ng th·ª≠ l·∫°i.'
      })
    }
  }

  return {
    // State
    isVisible,
    currentStep,
    isEditing,
    editingRouteId,
    steps,
    formData,
    validationErrors,
    isLoading,
    
    // Computed
    totalSteps,
    currentStepData,
    canGoNext,
    canGoPrevious,
    
    // Methods
    openModal,
    closeModal,
    nextStep,
    previousStep,
    updateFormData,
    validateCurrentStep,
    clearValidationErrors,
    saveDraft,
    saveForm
  }
} 