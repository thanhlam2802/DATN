package backend.backend.dao.Bus;

import backend.backend.entity.Bus;
import backend.backend.entity.BusRoute;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface BusDAO extends JpaRepository<Bus, Integer> {

    // Ph∆∞∆°ng th·ª©c g·ªëc, c√≥ th·ªÉ c·∫ßn JOIN FETCH n·∫øu BusRoute c≈©ng l√† lazy
    // N·∫øu BusRoute l√† LAZY v√† b·∫°n c·∫ßn n√≥, b·∫°n c√≥ th·ªÉ th√™m JOIN FETCH ·ªü ƒë√¢y
    List<Bus> findBusByBusRoutes(List<BusRoute> busRoutes);

    // --- C√ÅC PH∆Ø∆†NG TH·ª®C ƒê∆Ø·ª¢C CH·ªàNH S·ª¨A ƒê·ªÇ BAO G·ªíM JOIN FETCH ---

    // Ph∆∞∆°ng th·ª©c findById: ƒê·∫£m b·∫£o t·∫£i ƒë·∫ßy ƒë·ªß chi ti·∫øt khi t√¨m theo ID
    @Query("SELECT b FROM Bus b LEFT JOIN FETCH b.busImages LEFT JOIN FETCH b.category LEFT JOIN FETCH b.owner WHERE b.id = :id")
    Optional<Bus> findById(@Param("id") Integer id); // <-- S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c findById g·ªëc

    // Ph∆∞∆°ng th·ª©c findAll: ƒê·∫£m b·∫£o t·∫£i ƒë·∫ßy ƒë·ªß chi ti·∫øt khi l·∫•y t·∫•t c·∫£
    @Query("SELECT b FROM Bus b LEFT JOIN FETCH b.busImages LEFT JOIN FETCH b.category LEFT JOIN FETCH b.owner")
    List<Bus> findAll(); // <-- S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c findAll g·ªëc

    // Ph∆∞∆°ng th·ª©c findBusByOwner_Id: ƒê·∫£m b·∫£o t·∫£i ƒë·∫ßy ƒë·ªß chi ti·∫øt khi t√¨m theo Owner ID
    // D√≤ng n√†y c√≥ th·ªÉ b·ªã tr√πng l·∫∑p v·ªõi findByOwnerId, h√£y gi·ªØ m·ªôt c√°i v√† d√πng n√≥
    @Query("SELECT b FROM Bus b LEFT JOIN FETCH b.busImages LEFT JOIN FETCH b.category LEFT JOIN FETCH b.owner WHERE b.owner.id = :ownerId")
    List<Bus> findBusByOwner_Id(@Param("ownerId") Integer ownerId); // <-- S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c n√†y

    // Ph∆∞∆°ng th·ª©c findByOwnerId: ƒê·∫£m b·∫£o t·∫£i ƒë·∫ßy ƒë·ªß chi ti·∫øt khi t√¨m theo Owner ID
    // N·∫øu b·∫°n mu·ªën d√πng t√™n n√†y, h√£y ƒë·∫£m b·∫£o n√≥ l√† duy nh·∫•t v√† nh·∫•t qu√°n
    @Query("SELECT b FROM Bus b LEFT JOIN FETCH b.busImages LEFT JOIN FETCH b.category LEFT JOIN FETCH b.owner WHERE b.owner.id = :ownerId")
    List<Bus> findByOwnerId(@Param("ownerId") Integer ownerId); // <-- S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c n√†y

    // 2. T√¨m ki·∫øm Bus theo ID c·ªßa danh m·ª•c (BusCategory)
    @Query("SELECT b FROM Bus b LEFT JOIN FETCH b.busImages LEFT JOIN FETCH b.category LEFT JOIN FETCH b.owner WHERE b.category.id = :categoryId")
    List<Bus> findByCategoryId(@Param("categoryId") Integer categoryId); // <-- S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c n√†y

    // 3. T√¨m ki·∫øm Bus theo t√™n xe (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng, ch·ª©a m·ªôt ph·∫ßn)
    @Query("SELECT b FROM Bus b LEFT JOIN FETCH b.busImages LEFT JOIN FETCH b.category LEFT JOIN FETCH b.owner WHERE LOWER(b.name) LIKE LOWER(CONCAT('%', :name, '%'))")
    List<Bus> findByNameContainingIgnoreCase(@Param("name") String name); // <-- S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c n√†y

    // 4. T√¨m ki·∫øm Bus theo bi·ªÉn s·ªë xe (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng, ch·ª©a m·ªôt ph·∫ßn)
    @Query("SELECT b FROM Bus b LEFT JOIN FETCH b.busImages LEFT JOIN FETCH b.category LEFT JOIN FETCH b.owner WHERE LOWER(b.licensePlate) LIKE LOWER(CONCAT('%', :licensePlate, '%'))")
    List<Bus> findByLicensePlateContainingIgnoreCase(@Param("licensePlate") String licensePlate); // <-- S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c n√†y

    // üìä STATISTICS METHODS
    @Query("SELECT COUNT(b) FROM Bus b WHERE b.owner.id = :ownerId")
    Long countByOwnerId(@Param("ownerId") Integer ownerId);

    // üìä BUS STATUS STATISTICS METHODS
    @Query("SELECT COUNT(b) FROM Bus b WHERE b.owner.id = :ownerId AND EXISTS (SELECT 1 FROM BusSlot bs WHERE bs.bus.id = b.id)")
    Long countActiveBusesByOwnerId(@Param("ownerId") Integer ownerId);

    @Query("SELECT COUNT(b) FROM Bus b WHERE b.owner.id = :ownerId AND NOT EXISTS (SELECT 1 FROM BusSlot bs WHERE bs.bus.id = b.id)")
    Long countInactiveBusesByOwnerId(@Param("ownerId") Integer ownerId);

}
